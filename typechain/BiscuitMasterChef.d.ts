/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BiscuitMasterChefInterface extends ethers.utils.Interface {
  functions: {
    "add(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)": FunctionFragment;
    "canUnlockAmount(address,uint256)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "deposit(uint256,uint256,address)": FunctionFragment;
    "dev(address)": FunctionFragment;
    "devaddr()": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getMultiplier(uint256,uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "getNewRewardPerBlock(uint256)": FunctionFragment;
    "getPoolReward(uint256)": FunctionFragment;
    "halvingAtBlocks(uint256,uint256)": FunctionFragment;
    "lastUnlockBlock(address,uint256)": FunctionFragment;
    "lockOf(address,uint256)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "myReferrers(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "percentForReferLv1()": FunctionFragment;
    "percentForReferLv2()": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "referralAmountLv1(address,address)": FunctionFragment;
    "referralAmountLv2(address,address)": FunctionFragment;
    "referralToken()": FunctionFragment;
    "referrers(address)": FunctionFragment;
    "refsCount(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardMultipliers(uint256,uint256)": FunctionFragment;
    "set(uint256,uint256,bool)": FunctionFragment;
    "setAmountLPStakeLevelRefer(uint256,uint256)": FunctionFragment;
    "setStatus(bool)": FunctionFragment;
    "setreferralToken(address)": FunctionFragment;
    "stakeAmountLv1()": FunctionFragment;
    "stakeAmountLv2()": FunctionFragment;
    "status()": FunctionFragment;
    "totalAllocPoints(address)": FunctionFragment;
    "totalLock(address)": FunctionFragment;
    "totalLockInPool(uint256)": FunctionFragment;
    "totalLocks(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlock(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawAll(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canUnlockAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "dev", values: [string]): string;
  encodeFunctionData(functionFragment: "devaddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNewRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "halvingAtBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUnlockBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myReferrers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "percentForReferLv1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "percentForReferLv2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralAmountLv1",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralAmountLv2",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "referrers", values: [string]): string;
  encodeFunctionData(functionFragment: "refsCount", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultipliers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountLPStakeLevelRefer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setStatus", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setreferralToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmountLv1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmountLv2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoints",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalLock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalLockInPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalLocks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canUnlockAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devaddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNewRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "halvingAtBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUnlockBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentForReferLv1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "percentForReferLv2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralAmountLv1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralAmountLv2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refsCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAmountLPStakeLevelRefer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setreferralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmountLv1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmountLv2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLockInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AmountStakeLevelRefer(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Lock(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Referral(address,address)": EventFragment;
    "SendReferralReward(address,address,uint256,uint256,uint256)": EventFragment;
    "SendReward(address,uint256,uint256,uint256)": EventFragment;
    "SetReferralToken(address,address)": EventFragment;
    "Status(address,bool)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountStakeLevelRefer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Referral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendReferralReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetReferralToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Status"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BiscuitMasterChef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BiscuitMasterChefInterface;

  functions: {
    add(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)"(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    canUnlockAmount(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "canUnlockAmount(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimReward(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimReward(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

    "dev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devaddr(overrides?: CallOverrides): Promise<[string]>;

    "devaddr()"(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getMultiplier(uint256,uint256,uint256[],uint256[],uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNewRewardPerBlock(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNewRewardPerBlock(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { forDev: BigNumber; forFarmer: BigNumber }
    >;

    "getPoolReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { forDev: BigNumber; forFarmer: BigNumber }
    >;

    halvingAtBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "halvingAtBlocks(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUnlockBlock(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastUnlockBlock(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockOf(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockOf(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

    myReferrers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "myReferrers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    percentForReferLv1(overrides?: CallOverrides): Promise<[BigNumber]>;

    "percentForReferLv1()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    percentForReferLv2(overrides?: CallOverrides): Promise<[BigNumber]>;

    "percentForReferLv2()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        rewardToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        rewardPerBlock: BigNumber;
        percentLockReward: BigNumber;
        percentForDev: BigNumber;
        feeForDep: BigNumber;
        finishBonusAtBlock: BigNumber;
        startBlock: BigNumber;
        totalLock: BigNumber;
        lockFromBlock: BigNumber;
        lockToBlock: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        rewardToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        rewardPerBlock: BigNumber;
        percentLockReward: BigNumber;
        percentForDev: BigNumber;
        feeForDep: BigNumber;
        finishBonusAtBlock: BigNumber;
        startBlock: BigNumber;
        totalLock: BigNumber;
        lockFromBlock: BigNumber;
        lockToBlock: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralAmountLv1(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "referralAmountLv1(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralAmountLv2(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "referralAmountLv2(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralToken(overrides?: CallOverrides): Promise<[string]>;

    "referralToken()"(overrides?: CallOverrides): Promise<[string]>;

    referrers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "referrers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    refsCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "refsCount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardMultipliers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAmountLPStakeLevelRefer(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAmountLPStakeLevelRefer(uint256,uint256)"(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setStatus(
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setStatus(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setreferralToken(
      _referralToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setreferralToken(address)"(
      _referralToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeAmountLv1(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeAmountLv1()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeAmountLv2(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakeAmountLv2()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    status(overrides?: CallOverrides): Promise<[boolean]>;

    "status()"(overrides?: CallOverrides): Promise<[boolean]>;

    totalAllocPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalAllocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLock(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalLock(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLockInPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalLockInPool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalLocks(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlock(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lockAmount: BigNumber;
        lastUnlockBlock: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lockAmount: BigNumber;
        lastUnlockBlock: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  add(
    _lpToken: string,
    _rewardToken: string,
    _startBlock: BigNumberish,
    _allocPoint: BigNumberish,
    _rewardPerBlock: BigNumberish,
    _percentLockReward: BigNumberish,
    _percentForDev: BigNumberish,
    _feeForDep: BigNumberish,
    _halvingAfterBlock: BigNumberish,
    _rewardMultiplier: BigNumberish[],
    _lockFromBlock: BigNumberish,
    _lockToBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)"(
    _lpToken: string,
    _rewardToken: string,
    _startBlock: BigNumberish,
    _allocPoint: BigNumberish,
    _rewardPerBlock: BigNumberish,
    _percentLockReward: BigNumberish,
    _percentForDev: BigNumberish,
    _feeForDep: BigNumberish,
    _halvingAfterBlock: BigNumberish,
    _rewardMultiplier: BigNumberish[],
    _lockFromBlock: BigNumberish,
    _lockToBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  canUnlockAmount(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "canUnlockAmount(address,uint256)"(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimReward(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimReward(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _referrer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,address)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    _referrer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "dev(address)"(
    _devaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devaddr(overrides?: CallOverrides): Promise<string>;

  "devaddr()"(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    _halvingAtBlock: BigNumberish[],
    _rewardMultiplier: BigNumberish[],
    _startBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMultiplier(uint256,uint256,uint256[],uint256[],uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    _halvingAtBlock: BigNumberish[],
    _rewardMultiplier: BigNumberish[],
    _startBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNewRewardPerBlock(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNewRewardPerBlock(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolReward(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { forDev: BigNumber; forFarmer: BigNumber }
  >;

  "getPoolReward(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { forDev: BigNumber; forFarmer: BigNumber }
  >;

  halvingAtBlocks(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "halvingAtBlocks(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastUnlockBlock(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastUnlockBlock(address,uint256)"(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockOf(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockOf(address,uint256)"(
    _holder: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  massUpdatePools(overrides?: Overrides): Promise<ContractTransaction>;

  "massUpdatePools()"(overrides?: Overrides): Promise<ContractTransaction>;

  myReferrers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "myReferrers(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingReward(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  percentForReferLv1(overrides?: CallOverrides): Promise<BigNumber>;

  "percentForReferLv1()"(overrides?: CallOverrides): Promise<BigNumber>;

  percentForReferLv2(overrides?: CallOverrides): Promise<BigNumber>;

  "percentForReferLv2()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lpToken: string;
      rewardToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      rewardPerBlock: BigNumber;
      percentLockReward: BigNumber;
      percentForDev: BigNumber;
      feeForDep: BigNumber;
      finishBonusAtBlock: BigNumber;
      startBlock: BigNumber;
      totalLock: BigNumber;
      lockFromBlock: BigNumber;
      lockToBlock: BigNumber;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lpToken: string;
      rewardToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      rewardPerBlock: BigNumber;
      percentLockReward: BigNumber;
      percentForDev: BigNumber;
      feeForDep: BigNumber;
      finishBonusAtBlock: BigNumber;
      startBlock: BigNumber;
      totalLock: BigNumber;
      lockFromBlock: BigNumber;
      lockToBlock: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  referralAmountLv1(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "referralAmountLv1(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralAmountLv2(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "referralAmountLv2(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referralToken(overrides?: CallOverrides): Promise<string>;

  "referralToken()"(overrides?: CallOverrides): Promise<string>;

  referrers(arg0: string, overrides?: CallOverrides): Promise<string>;

  "referrers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  refsCount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "refsCount(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardMultipliers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardMultipliers(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,uint256,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAmountLPStakeLevelRefer(
    _stakeAmountLv1: BigNumberish,
    _stakeAmountLv2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAmountLPStakeLevelRefer(uint256,uint256)"(
    _stakeAmountLv1: BigNumberish,
    _stakeAmountLv2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setStatus(
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setStatus(bool)"(
    _status: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setreferralToken(
    _referralToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setreferralToken(address)"(
    _referralToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeAmountLv1(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeAmountLv1()"(overrides?: CallOverrides): Promise<BigNumber>;

  stakeAmountLv2(overrides?: CallOverrides): Promise<BigNumber>;

  "stakeAmountLv2()"(overrides?: CallOverrides): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<boolean>;

  "status()"(overrides?: CallOverrides): Promise<boolean>;

  totalAllocPoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoints(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLock(
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalLock(address)"(
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLockInPool(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalLockInPool(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalLocks(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlock(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlock(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardDebtAtBlock: BigNumber;
      lockAmount: BigNumber;
      lastUnlockBlock: BigNumber;
    }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      rewardDebtAtBlock: BigNumber;
      lockAmount: BigNumber;
      lastUnlockBlock: BigNumber;
    }
  >;

  withdraw(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,uint256)"(
    _pid: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    add(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)"(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    canUnlockAmount(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canUnlockAmount(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claimReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    dev(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    "dev(address)"(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    devaddr(overrides?: CallOverrides): Promise<string>;

    "devaddr()"(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256,uint256[],uint256[],uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewRewardPerBlock(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewRewardPerBlock(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { forDev: BigNumber; forFarmer: BigNumber }
    >;

    "getPoolReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { forDev: BigNumber; forFarmer: BigNumber }
    >;

    halvingAtBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "halvingAtBlocks(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUnlockBlock(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastUnlockBlock(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOf(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockOf(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    "massUpdatePools()"(overrides?: CallOverrides): Promise<void>;

    myReferrers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "myReferrers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentForReferLv1(overrides?: CallOverrides): Promise<BigNumber>;

    "percentForReferLv1()"(overrides?: CallOverrides): Promise<BigNumber>;

    percentForReferLv2(overrides?: CallOverrides): Promise<BigNumber>;

    "percentForReferLv2()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        rewardToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        rewardPerBlock: BigNumber;
        percentLockReward: BigNumber;
        percentForDev: BigNumber;
        feeForDep: BigNumber;
        finishBonusAtBlock: BigNumber;
        startBlock: BigNumber;
        totalLock: BigNumber;
        lockFromBlock: BigNumber;
        lockToBlock: BigNumber;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lpToken: string;
        rewardToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        rewardPerBlock: BigNumber;
        percentLockReward: BigNumber;
        percentForDev: BigNumber;
        feeForDep: BigNumber;
        finishBonusAtBlock: BigNumber;
        startBlock: BigNumber;
        totalLock: BigNumber;
        lockFromBlock: BigNumber;
        lockToBlock: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralAmountLv1(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referralAmountLv1(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralAmountLv2(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referralAmountLv2(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralToken(overrides?: CallOverrides): Promise<string>;

    "referralToken()"(overrides?: CallOverrides): Promise<string>;

    referrers(arg0: string, overrides?: CallOverrides): Promise<string>;

    "referrers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    refsCount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "refsCount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardMultipliers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountLPStakeLevelRefer(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAmountLPStakeLevelRefer(uint256,uint256)"(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(_status: boolean, overrides?: CallOverrides): Promise<void>;

    "setStatus(bool)"(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setreferralToken(
      _referralToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setreferralToken(address)"(
      _referralToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAmountLv1(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeAmountLv1()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAmountLv2(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeAmountLv2()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<boolean>;

    "status()"(overrides?: CallOverrides): Promise<boolean>;

    totalAllocPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalAllocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLock(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalLock(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLockInPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalLockInPool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unlock(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lockAmount: BigNumber;
        lastUnlockBlock: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        rewardDebtAtBlock: BigNumber;
        lockAmount: BigNumber;
        lastUnlockBlock: BigNumber;
      }
    >;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AmountStakeLevelRefer(
      user: string | null,
      stakeAmountLv1: BigNumberish | null,
      stakeAmountLv2: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; stakeAmountLv1: BigNumber; stakeAmountLv2: BigNumber }
    >;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    Lock(
      to: string | null,
      value: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Referral(
      user: string | null,
      ref: string | null
    ): TypedEventFilter<[string, string], { user: string; ref: string }>;

    SendReferralReward(
      user: string | null,
      referrer: string | null,
      pid: BigNumberish | null,
      amount: null,
      lockAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        referrer: string;
        pid: BigNumber;
        amount: BigNumber;
        lockAmount: BigNumber;
      }
    >;

    SendReward(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      lockAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber; lockAmount: BigNumber }
    >;

    SetReferralToken(
      user: string | null,
      referralToken: null
    ): TypedEventFilter<
      [string, string],
      { user: string; referralToken: string }
    >;

    Status(
      user: string | null,
      status: null
    ): TypedEventFilter<[string, boolean], { user: string; status: boolean }>;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;
  };

  estimateGas: {
    add(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)"(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    canUnlockAmount(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canUnlockAmount(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claimReward(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dev(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "dev(address)"(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    devaddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devaddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256,uint256[],uint256[],uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNewRewardPerBlock(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNewRewardPerBlock(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPoolReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    halvingAtBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "halvingAtBlocks(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUnlockBlock(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastUnlockBlock(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockOf(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockOf(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    massUpdatePools(overrides?: Overrides): Promise<BigNumber>;

    "massUpdatePools()"(overrides?: Overrides): Promise<BigNumber>;

    myReferrers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "myReferrers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    percentForReferLv1(overrides?: CallOverrides): Promise<BigNumber>;

    "percentForReferLv1()"(overrides?: CallOverrides): Promise<BigNumber>;

    percentForReferLv2(overrides?: CallOverrides): Promise<BigNumber>;

    "percentForReferLv2()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralAmountLv1(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referralAmountLv1(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralAmountLv2(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "referralAmountLv2(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralToken(overrides?: CallOverrides): Promise<BigNumber>;

    "referralToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    referrers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "referrers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    refsCount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "refsCount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardMultipliers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAmountLPStakeLevelRefer(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAmountLPStakeLevelRefer(uint256,uint256)"(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setStatus(_status: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setStatus(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setreferralToken(
      _referralToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setreferralToken(address)"(
      _referralToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeAmountLv1(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeAmountLv1()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAmountLv2(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeAmountLv2()"(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    "status()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalAllocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLock(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalLock(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLockInPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalLockInPool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlock(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unlock(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePool(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    add(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,uint256)"(
      _lpToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      _allocPoint: BigNumberish,
      _rewardPerBlock: BigNumberish,
      _percentLockReward: BigNumberish,
      _percentForDev: BigNumberish,
      _feeForDep: BigNumberish,
      _halvingAfterBlock: BigNumberish,
      _rewardMultiplier: BigNumberish[],
      _lockFromBlock: BigNumberish,
      _lockToBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    canUnlockAmount(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canUnlockAmount(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,address)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dev(_devaddr: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "dev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devaddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devaddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256,uint256[],uint256[],uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      _halvingAtBlock: BigNumberish[],
      _rewardMultiplier: BigNumberish[],
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNewRewardPerBlock(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNewRewardPerBlock(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolReward(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolReward(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    halvingAtBlocks(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "halvingAtBlocks(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUnlockBlock(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastUnlockBlock(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockOf(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockOf(address,uint256)"(
      _holder: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    massUpdatePools(overrides?: Overrides): Promise<PopulatedTransaction>;

    "massUpdatePools()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    myReferrers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "myReferrers(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingReward(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percentForReferLv1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "percentForReferLv1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    percentForReferLv2(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "percentForReferLv2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralAmountLv1(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referralAmountLv1(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralAmountLv2(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referralAmountLv2(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "referralToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "referrers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refsCount(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "refsCount(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardMultipliers(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint256,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAmountLPStakeLevelRefer(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAmountLPStakeLevelRefer(uint256,uint256)"(
      _stakeAmountLv1: BigNumberish,
      _stakeAmountLv2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setStatus(
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setStatus(bool)"(
      _status: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setreferralToken(
      _referralToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setreferralToken(address)"(
      _referralToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeAmountLv1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeAmountLv1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeAmountLv2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeAmountLv2()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "status()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalAllocPoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLock(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLock(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLockInPool(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLockInPool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlock(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,uint256)"(
      _pid: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
